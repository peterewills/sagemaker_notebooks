#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback
import pandas as pd
# the classifier we'll use
from sklearn.naive_bayes import GaussianNB

# These are the paths to where SageMaker mounts interesting things in your container.
prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

def write_error(e):
    # Write out an error file. This will be returned as the failureReason in the
    # DescribeTrainingJob result.
    
    trc = traceback.format_exc()
    with open(os.path.join(output_path, 'failure'), 'w') as s:
        s.write('Exception during training: ' + str(e) + '\n' + trc)
    
    # Printing this causes the exception to be in the training job logs, as well.
    print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
    
    # A non-zero exit code causes the training job to be marked as Failed.
    sys.exit(255)



def train():
    # execute the training
    print('Starting the training.')
    
    try:
        # load training data
        train_data_path = os.path.join(training_path,'breast_cancer.csv')
        train_data = pd.read_csv(train_data_path,header=None)

        # labels are in the first column
        train_y = train_data.ix[:,0]
        train_X = train_data.ix[:,1:]

        # Now use scikit-learn's decision tree classifier to train the model.
        clf = GaussianNB()
        clf = clf.fit(train_X, train_y)

        # save the model
        with open(os.path.join(model_path, 'gaussian-NB-model.pkl'), 'w') as out:
            pickle.dump(clf, out)
        print('Training complete.')
        
    except Exception as e:
        # write out an error file, and return as failureReason in DescribeTrainingJob
        write_error(e)
        
        
if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
